"use client";

import {
  FormSchemaAddScheduleEvent,
  TFormSchemaAddScheduleEvent,
} from "@/lib/types-forms";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { add, addMinutes, format } from "date-fns";

import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { cn } from "@/lib/utils";
import { CalendarIcon } from "lucide-react";
import { Calendar } from "@/components/ui/calendar";
import { TimePickerDemo } from "@/components/ui/time-picker-demo";
import { TimePicker12Demo } from "@/components/ui/time-picker-12h-demo";

interface FormAddEventProps {
  editObj?: Omit<TFormSchemaAddScheduleEvent, "id" | "scheduler_id">;
}

const FormAddScheduleEvent = ({
  editObj = {
    title: "",
    type: "Call Availability",
    start: new Date(),
    end: add(new Date(), { minutes: 15 }),
    people_invited: [],
    description: "",
  },
}: FormAddEventProps) => {
  const form = useForm<TFormSchemaAddScheduleEvent>({
    resolver: zodResolver(FormSchemaAddScheduleEvent),
    defaultValues: editObj,
  });
  const eventType = form.watch("type");
  const startTimestamp = form.watch("start");

  const onSubmit = (values: TFormSchemaAddScheduleEvent) => {
    console.log(values);
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="pes-grid-form">
        {/* Event Title */}
        <FormField
          control={form.control}
          name="title"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Title</FormLabel>
              <FormControl>
                <Input placeholder="" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* Event Type */}
        <FormField
          control={form.control}
          name="type"
          render={({ field: { onChange, value } }) => (
            <FormItem>
              <FormLabel>Type</FormLabel>
              <Select onValueChange={onChange} defaultValue={value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select an event type" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="Call Availability">
                    Call Availability
                  </SelectItem>
                  <SelectItem value="Session">Session</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* Event Start Date */}
        <FormField
          control={form.control}
          name="start"
          render={({ field }) => (
            <FormItem className="col-span-2 flex flex-col">
              <FormLabel>Start</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant={"outline"}
                      className={cn(
                        "pl-3 text-left font-normal",
                        !field.value && "text-muted-foreground"
                      )}
                    >
                      {field.value ? (
                        format(field.value, "PPP - hh:mm a")
                      ) : (
                        <span>Start Timestamp</span>
                      )}
                      <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent
                  className="w-auto flex flex-col items-center p-4"
                  align="start"
                >
                  <Calendar
                    mode="single"
                    selected={field.value}
                    onSelect={(value) => {
                      if (eventType === "Call Availability" && value) {
                        form.setValue("end", new Date());
                        console.log("dada");
                      }
                      field.onChange(value);
                    }}
                    disabled={(date) => date < new Date()}
                  />
                  <TimePicker12Demo
                    setDate={field.onChange}
                    date={field.value}
                  />
                </PopoverContent>
              </Popover>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* Event End Date */}
        <FormField
          control={form.control}
          name="start"
          render={({ field }) => (
            <FormItem className="col-span-2 flex flex-col">
              <FormLabel>End</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant={"outline"}
                      className={cn(
                        "pl-3 text-left font-normal",
                        !field.value && "text-muted-foreground"
                      )}
                      disabled={eventType === "Call Availability"}
                    >
                      {field.value ? (
                        format(field.value, "PPP - hh:mm a")
                      ) : (
                        <span>End Timestamp</span>
                      )}
                      <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent
                  className="w-auto flex flex-col items-center p-4"
                  align="start"
                >
                  <Calendar
                    mode="single"
                    selected={field.value}
                    onSelect={field.onChange}
                    disabled={(date) => date < new Date()}
                  />
                  <TimePicker12Demo
                    setDate={field.onChange}
                    date={field.value}
                  />
                </PopoverContent>
              </Popover>
              <FormMessage />
            </FormItem>
          )}
        />

        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
};

export default FormAddScheduleEvent;
